Resonex php

Is just a simple web-application built with (PHP - MySQL -SCSS), it is for learning purpose with a lot of functionalities behind the scenes:
-	CRUD principals linked with the database
-	Validation, Sanitization, Error handling, password hashing & verifying, user existence
-	Sessions & session security
-	Later: to do list (OOP, MVP)

Registration Page (code explanation)
1)	So, this is the registration page for registering new users, a simple form for user data, it has Validation - Sanitization - Password Hashing - Error Handling - Checking if the user exists - session & session security and storing its data in the database.

2)	It begins by checking if the user already logged-in, if so, they will be redirected to todo.php page using these 2 customized functions
A custom function used for: reusability, keep the code dry, readable, and its name should be meaningful.
So the registration page will be not visible to someone who’s logged in.

Helpers.php -> The isLoggedIn() checks if the user is logged in by checking the session variables. For that we use the superglobal session variable ($_SESSION) -> what is a session?
So basically, the function double check if the logged in variable exists with isset built-in function (checks if the variable is set or null and return true) and if that variable is true. this variable will be set in the login functionality (when user login)
Then we have the redirect() that takes the URL as an argument and redirect the user to that path using the header() built-in function and then it exits the script in that case: not displaying the registration page.

3)	If the user is new or not logged in, he will be able to create a new account using that controlled form.
We initialize the variables to empty strings, to avoid undefined variable errors, so we ensure that the variables are defined before they are used. This is important because if the user submits the form without filling in all the fields, after submission we will get an "undefined variable".
they are also used to store the error messages for any validation errors (for good UX). These variables are linked with the inputs as value attributes, so that the user does not have to re-enter all the information again if there are validation errors.


4)	In case of Form submission, we check if the request method is POST, by using the SuperGlobal $_SERVER variable. Because we have two types of request GET & POST. The Get method is used to request data from the server, while POST is used to send data (create, update). In that case we used POST method to send data to the server for registering new user.

5)	Sanitize and Validate inputs:
-	We never trust the user inputs; we always must validate and sanitize it.
-	$_POST is a SuperGlobal that holds the data submitted through the form. it's linked with the name attribute of the inputs in the form -> to update the initialized variables before.
-	The trim() removes whitespace from the beginning and end of a string.
-	The isset() checks if the terms checkbox was checked by the user. If so, the $terms variable is set to 1 (true), otherwise 0 (false).

6)	Username validation:
-	The empty() checks if the variable is empty (""). why? Because the required attribute is not secure enough, because simply you can disable the required attribute in the browser using the developer tools and you will be able to submit the form without filling the username field.
-	The preg_match() is a built-in function checks if the username matches the given condition.
-	So basically, it says, If the username is empty or not valid, show error message.

7)	Email Validation:
-	The filter_var() function is used to validate and sanitize data. In this case, it is used to sanitize the email input by removing any illegal characters. The FILTER_VALIDATE_EMAIL checks if the email is in a valid format
-	The FILTER_SANITIZE_EMAIL filter removes all illegal characters from the email.

8)	Password Validation & confirmation & Hashing:
-	Ensures the confirmation password matches the original password.
-	Hash the password if valid using password_hash() using the PASSWORD_DEFAULT algorithm (bcrypt).

9)	Age Validation

10)	Phone Validation:
-	The filter_var() function is used to validate and sanitize data. In this case, it is used to sanitize the phone input by removing any illegal characters. The FILTER_SANITIZE_NUMBER_INT checks if the phone is in a valid format by removing all characters except digits, plus and minus signs. This ensures that the phone number is stored in a clean format in the database.

11)	Terms & Conditions

12)	If all validations pass and no errors, register the user

13)	 Check if username or email already exists, preventing duplicate registrations
-	we use prepare() method to protect the database and sanitize inputs from SQL injection (ex: someone can inject SQL code to delete database). So, prepare() is used to prepare an SQL statement for execution with placeholders (). It takes a SQL query as an argument and returns a statement object.
-	the SQL query checks if a row exists in the users table where the username, email matches a given value (placeholders).  Means SQL query is prepared with placeholders (:)
-	The execute() method runs the prepared SQL query with the values bound earlier. At this point, the database checks if there are any rows in the users table where: The username matches $username, OR The email matches $email.
-	The fetch method to fetch the result from the query. $result now holds the database response, which could be a row or Empty

14)	If username or email exists, show error – If no error, insert new user into database

15)	Check if the user was successfully registered, if so, create the session variables for the user and redirect to todo.php page.
